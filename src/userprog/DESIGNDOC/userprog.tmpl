		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Mohamed Ramadan 	<MRamadanCSED@outlook.com>
Marwan 	Aly 		<marwanaly2050@gmail.com>
Yehia 	Khairy 		<yehia.khaery2017@gmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

- from the start_process I tokenize the command line into arguments using
simple technique loop until a space is found then start another argv.

- then in setup_stack() I loop over them as the x86 calling convention states.
putting the argument values first and then storing their addresses, after that
I save the address of the first address (address of argv) then I put argc. 
then a fake return address as main doesn't really return.
if the stack overflows, it will make a page fault which I considered handled.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

char * strtok_r (char *s, const char *delimiters, char **save_ptr)  
this function makes keeping track of the tokenizer position, unlike
normal strtok which keeps track of the tokenizer, the problem of the 
normal strtok is it will use stack pointer to keep track of the string
which will cause race condition, also it will misbehave if multiple delimiters
occurs consecutively. 

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

I think unix is better because it will make all the pointer dereferencing and
allocating to a normal user program "shell" which safer and more robust.
also adding more features like PATH variables and shell commands will make 
kernel much more complex and bigger which is not good.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>>	added to thread.c
	/*lock used to allocate fd*/
	static struct lock fd_lock;

	this variable is used to make allocation of fd for different opened files.
	concurrent and race-cycle free. in every assignment we atomically increase
	the counter for the current thread and return the new counter and
	links the new file to it.

>>	added to struct thread , thread.h
	/* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
    struct list children;               /*children processes*/
    struct thread * parent_thread;      /*pointer to the waiting thread for this process to end*/
    struct condition wait_cond;         /*wait condition for sys_wait */
    struct list opened_files;           /*opened files by this thread*/
    int fd_counter;                     /*file descriptor counter for this thread*/
    struct process_child_elem * child_elem_pntr;  /*holder for status for this thread*/
    struct semaphore wait_sema;

    - children represents the children of the current thread which is used in wait and exec.
    - wait_cond is used in wait and exit process.
    - opened_files is used to keep track of the currently opened files.
    - fd_counter is used to link every file to a unique fd.
    - wait_sema is used to make sure process execute doesn't return until load() is finished.
    - child_elem_pntr is a pointer to the entry of this child process in the parent 
    children table.

>>	added to thread.h
	struct process_child_elem{
	  tid_t pid;              /*child thread pid*/
	  int status;             /*child thread return status*/
	  struct list_elem child_elem;        /*list element to put thread in children list*/
	};

	- this struct represents entry in children list of every thread. when a thread creates another
	the child thread is stored by this data structure. pid represents child thread pid, status is 
	the exit status of the child thread.

>>	added to thread.h
	struct file_descriptor{
	  struct file *     fp;             /*file which this element represent*/
	  int               fd;             /*file descriptor for this element*/
	  struct list_elem  elem;           /*list element to be stored in thread*/
	};

	- this represents every opened file by this process.
	- fp is the file pointer to this file.
	- fd is the file descriptor for this file.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

	- as explained above, the struct file_descriptor associates every file
	pointer with its file_descriptor for this thread.

	- the function get_new_fd(file) creates a file_descriptor for a file
	pointer. the operation is atomic which means that the file descriptor is
	unique for every thread.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
	- first we check that the stack pointer is valid, which is implied by
	it is bigger that 0x08048000 and also less than PHYS_BASE and we call 
	function from pagedir.c which tells that this pointer represents a pointer
	in virtual address space.

	- then we do the same validation with every pointer in system calls.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

	- two as the pagedir_get_page is called for every new page and if the
	full page lies in middle of a page this function is called twice.
	the same is done with 2 bytes if they lies in two different pages.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
